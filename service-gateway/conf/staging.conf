

# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
play.crypto.secret = "QCY?tAnfk?aZ?iwrNwnxIlR6CTf:G3gf:90Latabg@5241AB`R5W:1uDFN];Ik@n"





# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
    # The application languages
    langs = [ "en" ]
    
    # Whether the language cookie should be secure or not
    #langCookieSecure = true
    
    # Whether the HTTP only attribute of the cookie should be set to true
    #langCookieHttpOnly = true
}




play.db {
    config = "db"
    default = "default"
}


jpa.default=portalpu
db.default.driver=org.postgresql.Driver

fixedConnectionPool = 9

db.default.hikaricp.minimumIdle = ${fixedConnectionPool}
db.default.hikaricp.maximumPoolSize = ${fixedConnectionPool}
db.default.url="jdbc:postgresql://localhost:5432/tamsyv2"

db.default.username=postgres
db.default.password="a5T3w@%vxTy8EA$Sj&Sz"

db.default.migration.placeholderPrefix="$flyway{{{"
db.default.migration.placeholderSuffix="}}}"

db.default.jndiName=DefaultDS
db.default.logStatements=false
db.default.migration.auto=true


play {
    
    modules {
        
        enabled = ${play.modules.enabled} ["com.encentral.ncc.binder.Module", "play.modules.swagger.SwaggerModule","org.flywaydb.play.PlayModule"]
        
    }
    
}

api.version="1.0.0"
swagger.api.host=" "
swagger.api.info.title=" "
swagger.api.info.termsOfServiceUrl="http://encentralsolutions.com"
swagger.api.info.contact="info@encentralsolutions.com"
swagger.api.info.license="Licence Data. Coming Soon.."
swagger.api.info.description=" For more information on error codes click <strong><a href='/api-server/error'>here</a></strong> "

play.filters.enabled=[]
play.http.filters = "filters.Filters"
play.filters.enabled += "play.filters.hosts.AllowedHostsFilter"
play.filters.enabled += "play.filters.cors.CORSFilter"
play.filters.cors {
    allowedOrigins = null
    allowedHttpMethods = null
    # allow all headers
    allowedHttpHeaders = null
    # allow all paths
    pathPrefixes = ["/"]
}

play.filters.hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".showcase.com.ng", "localhost:9000"]
    allowed = ["localhost"]
}

play.filters.enabled += "play.filters.gzip.GzipFilter"
play.filters.gzip {
    
    contentType {
        
        # If non empty, then a response will only be compressed if its content type is in this list.
        whiteList = [ "text/*", "application/javascript", "application/json" ]
        
        # The black list is only used if the white list is empty.
        # Compress all responses except the ones whose content type is in this list.
        blackList = []
    }
}

play.http.parser.maxDiskBuffer=50MB
play.http.parser.maxMemoryBuffer=25MB

akka {
    quartz {
        schedules {
            Every7AM {
                description = "A cron job that fires off every 7'O clock"
                expression = "0 0 7 ? * *"
                timezone ="GMT+1"
            }
            Every4HR {
                description = "A cron job that fires off every 4 hours"
                expression = "0 0 */4 ? * *"
            }
        }
    }
}


akka.actor.deployment {
  /jackOfAllTrade/workers {
    router = round-robin-pool
    resizer {
      lower-bound = 5
      upper-bound = 100
      messages-per-resize = 10
    }
  }
}

background.worker {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = 10
  }
}
